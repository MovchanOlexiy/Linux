clear - очистити термінал від тексту
pwd - показати в якій папці знаходишся
ls - показати файли
ls -l - показати всі файли та їх дані в поточній папці
ls -la - показати всі файли та їх дані (включаючи приховані) в поточній папці
mkdir Alex - створити папку Alex
cd Alex - перейти в папку Alex
cd .. - вийти з папки (крок назад)
cd /.. - вийти з папки (2 кроки назад)
cd ~ - вийти в кореневу папку
rmdir Alex - видалити пусту папку Alex
rm -R Alex - видалити папку з файлами Alex
touch Linux.txt Eugene_1.txt Nataliya_1.json - створити 3 файли з відповідними назвами і форматами
cat Linux.txt - показати зміст файлу Linux.txt
cp mars.txt venera.json /c/users/John/desktop/papka1/papka3/papka6 - скопіювати файли mars.txt і venera.json в папку "papka6"
mv mars.txt venera.json /c/users/John/desktop/papka1 - перемістити файли mars.txt і venera.json в папку "papka1"
rm Linux.txt - видалити файл Linux.txt
vim Eugene_1.txt - відкрити файл Eugene_1.txt з допомогою текстового редактора vim
ssh-keygen -t rsa -C "MovchanOlexiy" - згенерувати SSH-ключ до профілю GitHub "MovchanOlexiy"
git clone git@github.com:MovchanOlexiy/Linux.git - скопіювати коміт з GitHub на ПК
git config --global user.name "Movchan Olexiy" - привязати ім'я юзера, який вносить коміти
git config --global user.name - перевірити ім'я юзера, який вносить коміти
git config --global user.email "test@gmail.com" - прив'язати пошту юзера, який вносить коміти
git config --global user.email - перевірити пошту юзера, який вносить коміти
git clone git@github.com:MovchanOlexiy/test_repo.git - клонувати в поточну папку github-репозиторій test_repo зі всіма файлами
git status - подивитись статус файлів в локальному репозиторії (нові зміни на ПК - червоні файли)
git add file.txt - додати файл file.txt і записати його зміни в локальний репозиторій (файл починає відслідковуватись локальним репозиторієм, червоні файли на ПК стануть зеленими)
git add . - додати ВСІ нові файли і їх зміни в локальний репозиторій
git commit -m "add files" - створити коміт локального репозиторія (зліпок, до якого можна відкотитись) з коментарем "add files"
git commit -am "add files" - це git add i git commit однією командою (працює тільки з фалами, які вже відслідковуються, тобто були хоча б раз додані через git add в локальний репозиторій)
git push - запушити локальний репозиторій в репозиторій GitHub
sudo !! - повторити попередню команду
sudo - запустити команду з правами адміна без вводу пароля (ставиться перед будь-якою командою)
ps axu - дізнатись активні процеси
ps axu | grep gcalctool - знайти всі процеси з назвою "gcalctool"
kill -9 25609 - вбити процес з PID-номером 25609
killall gcalctool - вбити всі процеси з назвою "gcalctool"
. - застосувати до поточного каталогу
./* - застосувати до всіх файлів в поточному каталозі
______________
grep ribak Linux.txt - пошук слова "ribak" в файлі Linux.txt (чутливий до регістру - text)
grep -i ribak Linux.txt - поиск слова "ribak" в файле Linux.txt (нечувствительный к регистру - text, TeXt, TEXT)
grep -R ribak Alex - поиск слова "ribak" в файлах папки Alex
history - посмотреть историю выполненных команд
git init - создать репозиторий в текущей папке
git branch - показать на какой ветке находишься
git checkout -b second-branch - создать доп ветку "second-branch" и сразу перейти на неё
git checkout master - перейти с вторичной ветки на главную
git merge second-branch - вмёрджить "second-branch" ветку в текущую
git push -u origin second-branch - запушить "second-branch" ветку на внешний репозиторий находясь на другой ветке (например main)
git branch -d second-branch - удалить "second-branch" ветку
adb start-server - запуск спеціальної служби для зв'язку з Android-пристроєм
adb devices - показати підключені через ADB пристрої
adb get-state - дізнатись стан пристрою (device - працює, bootloader - завантажується, offline - вимкнено)
adb logcat - показати логи пристрою в реальному часі (^C - зупинити відображення логів)
adb logcat -c - очистити всі логи на пристрої
adb logcat | grep -rnw "com.android.todolist" - показати логи пристрою в реальному часі за паттерном "com.android.todolist"
adb logcat | grep -rnw "com.android.todolist" > /desktop/todolist_logs.log - записати логи пристрою за паттерном "com.android.todolist" в файл todolist_logs.log
adb install /C/users/Username/desktop/app-debug.apk - встановити застосунок app-debug.apk на пристрій Android (вказуємо адресу звідки встановлюємо)
adb -r install /C/users/Username/desktop/app-debug.apk - оновити застосунок до більш нової версії
